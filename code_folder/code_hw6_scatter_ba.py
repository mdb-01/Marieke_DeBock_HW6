# -*- coding: utf-8 -*-
"""Code_HW6_scatter_BA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHsuIRYobsRsQSeqZe9MkXv6yO0ChBxl
"""

#Code for HW6 20.440
#Marieke De Bock
#04/03/2024

from pylab import *
import numpy as np
from matplotlib import pyplot as plt
import pandas as pd

#import excel data files
#make sure files are uploaded in left folder

#datafiles for bacteria strain, when in media vs when with DC
df_BA = pd.read_excel('bacterial_gene_expression.xlsx')

#finding genes that have an adjusted p-value of less than 0.05 for all three bacterial strains.
thresh_BA=(df_BA['D23580_padj']<=0.05) & (df_BA['LT2_padj']<=0.05) & (df_BA['TY2_padj']<=0.05)
# Taking values from given threshold.
df_BA_final=df_BA[thresh_BA]

#data sets are decomposed into smaller arrays for multivariate regression
genesBA=df_BA_final['LT2.GeneName']
log2BA_STM23880=df_BA_final['D23580_log2FoldChange']
log2BA_STMLT2=df_BA_final['LT2_log2FoldChange']
log2BA_STT2=df_BA_final['TY2_log2FoldChange']

expression_data_BA = [log2BA_STM23880, log2BA_STMLT2, log2BA_STT2]

top_50_BA_genes = []  # initialise array
# extract the top 50 expressed genes for each strain and their values
for j in range(3):
    # extract strain data
    strain_data = expression_data_BA[j]

    # sort from large to small
    sorted_data = np.sort(strain_data)[::-1]

    # extract 50 largest
    top_50_val = sorted_data[:50]
    top_50_BA_genes.append(top_50_val)

# plot these values in scatter plot

# combine the top 50 log2 fold change values for all strains
combined_data = np.concatenate(top_50_BA_genes)

# find y axis limit
y_min, y_max = np.min(combined_data), np.max(combined_data)

#initialise list for x
x_coordinates = []

# find x coordinates such that they dont overlap
for i in range(len(expression_data_BA)):
    # Add jitter to x-coordinates
    jitter = np.random.normal(loc=0, scale=0.1, size=len(top_50_BA_genes[i]))
    x_coordinates.append(np.full_like(top_50_BA_genes[i], i) + jitter)

# flatten x coordinates
x_coordinates = np.concatenate(x_coordinates)

# colormap
colors = plt.cm.tab10(np.linspace(0, 1, len(expression_data_BA)))

# plot with different colors for each strain
plt.figure(figsize=(10, 6))
for i in range(len(expression_data_BA)):
    plt.scatter(x_coordinates[i * 50:(i + 1) * 50], combined_data[i * 50:(i + 1) * 50], color=colors[i])

#give names to strains on x axis
plt.xticks(range(len(expression_data_BA)), ['STM23880', 'STMLT2', 'STT2'])

plt.ylim(2, 10)
plt.ylabel('log2fold Change ')
#give title
plt.title('Plot of top 50 expressed bacterial genes for each strain')


plt.show()